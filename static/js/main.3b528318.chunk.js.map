{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","stateInicial","mascota","propietario","fecha","hora","sintomas","useState","cita","actualizarCita","actualizarState","e","target","name","value","onSubmit","preventDefault","type","className","placeholder","onChange","Cita","index","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCita","nuevasCitas","splice","useEffect","setItem","stringify","titulo","Object","keys","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNA4EeA,MA1Ef,YAAmC,IAAbC,EAAY,EAAZA,UAIdC,EAAe,CACnBC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,IAToB,EAcDC,mBAASN,GAdR,mBAczBO,EAdyB,KAcnBC,EAdmB,KAgB1BC,EAAkB,SAAAC,GACtBF,EAAe,eACVD,EADS,eAEXG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAe9B,OACE,kBAAC,WAAD,KACE,0CAEA,0BAAMC,SAbS,SAACJ,GAClBA,EAAEK,iBAEFhB,EAAUQ,GAEVC,EAAeR,KASX,iDACA,2BACEgB,KAAK,OACLJ,KAAK,UACLK,UAAU,eACVC,YAAY,iBACZC,SAAUV,EACVI,MAAON,EAAKN,UAGd,kDACA,2BACEe,KAAK,OACLJ,KAAK,cACLK,UAAU,eACVC,YAAY,gCAA6BC,SAAUV,EAAiBI,MAAON,EAAKL,cAGlF,wCACA,2BAAOc,KAAK,OAAOC,UAAU,eAAeL,KAAK,QAAQO,SAAUV,EAAiBI,MAAON,EAAKJ,QAEhG,uCACA,2BAAOa,KAAK,OAAOC,UAAU,eAAeL,KAAK,OAAOO,SAAUV,EAAiBI,MAAON,EAAKH,OAE/F,2CACA,8BAAUa,UAAU,eAAeL,KAAK,WAAWO,SAAUV,EAAiBI,MAAON,EAAKF,WAE1F,4BAAQW,KAAK,SAASC,UAAU,+BAAhC,cCpDOG,EAdF,SAAC,GAAmC,IAAjCb,EAAgC,EAAhCA,KAAMc,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC3B,OACE,yBAAKL,UAAU,QAEb,uCAAY,8BAAOV,EAAKN,UACxB,2CAAgB,8BAAOM,EAAKL,cAC5B,qCAAU,8BAAOK,EAAKJ,QACtB,oCAAS,8BAAOI,EAAKH,OACrB,2CAAa,8BAAOG,EAAKF,WACzB,4BAAQW,KAAK,SAASC,UAAU,+BAA+BM,QAAS,kBAAMD,EAAaD,KAA3F,YCkESG,MAzEf,WAEE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAEhDJ,IAEHA,EAAiB,IANN,MAUgBnB,mBAAS,CAACmB,IAV1B,mBAUNK,EAVM,KAUCC,EAVD,KAoBPT,EAAe,SAAAD,GACnB,IAAMW,EAAW,YAAOF,GACxBE,EAAYC,OAAOZ,EAAO,GAC1BU,EAAYC,IAIdE,qBAAU,WAEaR,KAAKC,MAAMC,aAAaC,QAAQ,UAInDD,aAAaO,QAAQ,QAAST,KAAKU,UAAUN,IAG7CF,aAAaO,QAAQ,QAAST,KAAKU,UAAU,OAE9C,CAACN,IAIJ,IAAMO,EAC0B,IAA9BC,OAAOC,KAAKT,GAAOU,OAAe,eAAiB,uBAErD,OACE,kBAAC,WAAD,KACE,0DACA,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAEElB,UAzCM,SAAAQ,GAGhB,IAAMyB,EAAW,sBAAOF,GAAP,CAAcvB,IAE/BwB,EAAYC,OAuCN,yBAAKf,UAAU,mBACb,4BAAKoB,GACJP,EAAMW,KAAI,SAAClC,EAAMc,GAAP,OACT,kBAAC,EAAD,CACEqB,IAAKrB,EACLA,MAAOA,EACPd,KAAMA,EACNe,aAAcA,YCvDVqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3b528318.chunk.js","sourcesContent":["import React, { useState, Fragment } from \"react\";\r\n\r\nfunction Formulario ({crearCita}) {\r\n\r\n\r\n  //se crea en una const para poder reiniciarlo una vez hecho el submit\r\n  const stateInicial = {\r\n    mascota: \"\",\r\n    propietario: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    sintomas: \"\"\r\n  }\r\n  \r\n  // useState retorna dos funciones\r\n  //useState( [ valor inicial del state ]) puede ser objeto con propiedades\r\n  const [cita, actualizarCita] = useState(stateInicial);\r\n\r\n  const actualizarState = e => {\r\n    actualizarCita({\r\n      ...cita,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n \r\n  //funcion que se encarg de onSubmit agregar una cita con los campos llenados por el form\r\n  const enviarCita = (e) =>{\r\n    e.preventDefault()\r\n    //pasar la cita al componente App pasando por parametro el state cita\r\n    crearCita(cita)\r\n    //reincicar el state\r\n    actualizarCita(stateInicial)\r\n\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n\r\n      <form onSubmit={enviarCita}>\r\n        <label>Nombre Mascota</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          onChange={actualizarState}\r\n          value={cita.mascota}\r\n        />\r\n\r\n        <label>Nombre Dueño</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Dueño de la Mascota\" onChange={actualizarState} value={cita.propietario}\r\n        />\r\n\r\n        <label>Fecha</label>\r\n        <input type=\"date\" className=\"u-full-width\" name=\"fecha\" onChange={actualizarState} value={cita.fecha}/>\r\n\r\n        <label>Hora</label>\r\n        <input type=\"time\" className=\"u-full-width\" name=\"hora\" onChange={actualizarState} value={cita.hora}/>\r\n\r\n        <label>Sintomas</label>\r\n        <textarea className=\"u-full-width\" name=\"sintomas\" onChange={actualizarState} value={cita.sintomas}></textarea>\r\n\r\n        <button type=\"submit\" className=\"button-primary u-full-width\">\r\n          Agregar\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\n\r\nconst Cita = ({ cita, index, eliminarCita }) => {\r\n  return (\r\n    <div className=\"cita\">\r\n\r\n      <p>Mascota: <span>{cita.mascota}</span></p>\r\n      <p>Propietario: <span>{cita.propietario}</span></p>\r\n      <p>Fecha: <span>{cita.fecha}</span></p>\r\n      <p>Hora: <span>{cita.hora}</span></p>\r\n      <p>Síntomas: <span>{cita.sintomas}</span></p>\r\n      <button type=\"button\" className=\"button eliminar u-full-width\" onClick={() => eliminarCita(index)}>Borrar</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cita;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\nfunction App() {\n  //cargar las citas del localStorage como state inicial\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n  if (!citasIniciales) {\n    //si hay, las cargamos\n    citasIniciales = [];\n  }\n\n  //aca se almacenan las citas en su totalidad\n  const [citas, guardarCita] = useState([citasIniciales]);\n\n  const crearCita = cita => {\n    // function crearCita (cita)\n    //Copia el state y agrega una cita traida del Formulario\n    const nuevasCitas = [...citas, cita];\n    //Actualizamos el state con la nueva cita\n    guardarCita(nuevasCitas);\n  };\n\n  const eliminarCita = index => {\n    const nuevasCitas = [...citas];\n    nuevasCitas.splice(index, 1);\n    guardarCita(nuevasCitas);\n  };\n\n  //reemplaza a componentDidMount y componentDidUpdate\n  useEffect(() => {\n    //traemos todas las citas\n    let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n    if (citasIniciales) {\n      //si hay, las cargamos\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      //si no hay, creamos el array\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas]); //para que se ejecute solo cuando las citas se modifiquen\n  //[citas] es una dependencia\n\n  //Cargar titulo condicionalmente\n  const titulo =\n    Object.keys(citas).length === 0 ? \"No Hay Citas\" : \"Administra tus Citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              // se pasa por parametro una funcion\n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita, index) => (\n              <Cita\n                key={index} //posicion del arreglo\n                index={index}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}